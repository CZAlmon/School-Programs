==========================================
Database Ecommerce Store Project
==========================================

Zip Contents:

	TAR Linux command - tar -cvf DatabaseProject.tar *.php *.sql *.txt *.pdf ./Images/*
	
	Zipfolder: DatabaseProject.tar
	
	1.	index.php										- PHP file page, the main landing for the webstore.
	2.	products.php									- PHP file page that will show all items and will let logged in customers only add to basket.
	3.	add_to_basket.php								- PHP file page for adding items to the customers basket via a product page POST.
	4.	productSearch.php								- PHP file page for search queries by customers. As of right now this is an unfinished page and does not work.
	5.	customer.php									- PHP file page for customers to see all orders placed and to see the current basket.
	6.	change_basket.php								- PHP file page to change the basket's qauntity of an item when POST'ed by a user.
	7.	show_order_contents.php							- PHP file page to show an orders contents from the customer page.
	8.	employee.php									- PHP file page for employees to do employee related tasks.
	9.	register.php									- PHP file page that allows unregistered users to register with the store.
	10.	login.php										- PHP file page that allows users to login to the store. There is only one login for Customers, Staff, and Managers.
	11.	logout.php										- PHP file page that logs out the user, sends up a notification, and redirects to index.php
	12.	ECOMMERCE.sql									- SQL File that contains database information. Builds the tables and fills in values to each table.
	13.	drop_tables.sql									- SQL File that will drop all the tables in conjunction with ECOMMERCE.sql. This is to be used as a helper file in testing or other needs.
	14.	README.txt										- Current document
	15.	FinalReport.pdf									- FinalReport document, with images of website
	16.	/Images/*										- Directory of images of products, must be in /~LINKBLUE/CS405G/Images/$value Where $value is the image name, and LINKBLUE is the username of the person running the programs. LINKBLUE must also be changed within the products, customer, show_order_contents and employee pages to the username of the person running the programs.

	
=================================================
Code Description and Usage of Files
=================================================

	1.	index.php				
		This is the main landing of the website and includes a title as well as a navigation bar. This main navigation bar is on every page of this website. The main page is simple in design, with only a UKY College of Engineering graphic with the navigation bar. The navigation bar has buttons for the main page, products page, customer page, employee page, registration page, login page, and a logout page. The login link from this navigation bar, no matter which page, will show if you are logged in or not. If you are not logged in the bar will only have a link that says “Login”. If you are logged in, then this text changes to “You are logged in as: Username”. This will show users if they are logged in, and who they are logged in as. 
		
	2.	products.php			
		This page is viewable by anyone, whether they are logged in or not, whether customer or staff member. At the top of the page is a short line of text stating that if the user isn’t logged in they can still view the page of products, but won’t be able to add to basket or order anything. There is a non-working search bar at the top. There wasn’t enough time in the semester to implement a full search function. As of right now the search bar does work and POST’s the search terms to the product search page, but the product search page does not work. Please see the description for the product search page for more information. The only other thing on the product page is a table full of products and information. The tables layout is as follows: item picture, item name, item UPC number, quantity of the item in stock, if the item is on promotion or not, the item’s cost and finally a column for the button to add to basket. The only thing that changes here is whether a button appears in the last column. The button here only shows up if you are currently logged in as a customer. No matter if you are not logged in, logged in as an employee, or somehow logged in elsewise, the button won’t appear unless you are a customer. When you click on this button the link POST’s information, about which item you are adding to the basket due to which line the item and button are on, to the add to basket page for processing. Please see that description for more information. 
		
	3.	add_to_basket.php		
		The add to basket page is only called from the product page. The add to basket button POST’s information to this page. The page detects when information hasn’t been sent, and/or if the user is logged in. If either or both of these things are true, then nothing will happen except error messages and redirects will happen. The only time anything will happen is when a correctly logged in customer clicks the add to basket button and the information is POST’ed to this page. There is not user input except for the button click so no validation needs to occur. The button has encoded within it which item number is being added to the basket. The file detects the user who is logged in and gets that users unique user ID number from the database. Then the file adds the item to the basket table with the user’s ID, the item’s ID, and the quantity of 1. As of now the user is not able to change quantity added to the cart, but within the customer page they can change the quantity in their cart. So the action is doable, just not from this or the products page. When this query is completed then a notification pops up to the user and redirects them back to the products page. If something went wrong, an error message appears on the page for the user to go back and try again.
		
	4.	productSearch.php		
		The product search page is not implemented. There is a chunk of code that is commented out. We did not have time to implement full measures as needed to request data from the database and display it. There is a navigation bar at the top of the page to take you back to any other page if you find yourself on the page, by trying to search for something from the product page. On the product page there is a warning about the search function not working.
		
	5.	customer.php			
		Next we have the customer page. The customer page has multiple items on it. The first thing that happens is when you load the page it detects whether you are a logged in as a customer or not. If you are not logged in as a customer, the only thing that displays is a short text notification that says you have to be a customer to view this page. Whether you are not logged in, logged in a staff member, or logged in as someone else somehow, this message will pop up. If you are logged in as a customer there are a few things you can view on this page. There are two tables of things. The first is a table of your current basket list. This table consists of similar things as the products table; the item picture, item name, number, cost, quantity, and finally a text box and button to change the quantity. This text box and button are within a form that POST’s the information, user input of quantity and the item number, to the change basket file, please see that description for more information on change the quantity. Under this table is a total cost line and a button to place the order. If there is nothing in your basket this button is hidden, and the total cost line is $0. This button to place the order POST’s information within this same customer page. The POST is detected and validation occurs to make sure there is stock of each item in the quantity ordered by the user. If stock is less than the quantity being requested, then the file stops and a notification pops up to the user alerting them that the order couldn’t go through and text is shown on the page that tells the customer which items can’t be ordered at this time so they can change their basket. The next table is spaced under the place order button, or where it would be if hidden, and is a table of all the orders that have ever been placed by the customer. This table consists of an order number column, a shipped column, and a view entire order column. The order number column shows the order number that is stored in the database for that particular order. The shipped column tells the user if the order has been shipped yet or not. The view entire order column is simply a button. This button POST’s the order number to the show order contents page so the user can view the items that were in that order. Please see that description for more information. 
		
	6.	change_basket.php		
		The change basket page receives POST information from the customer page. There is the same customer check as before. If the POST information is invalid/empty or the person logged in, or lack thereof, is not a customer then nothing happens but a notification pop up of the error and a redirect to the main index page happens. If there is POST information and it is a customer that is logged in, then the POST information is parsed. As this information contains data entered by the user, it checks for 5 digits and only digits. The customer can only enter numbers between 0-99999. If the validation passed, the new quantity is checked, if it is 0, then the item is deleted from the basket and the user is alerted that it was successfully deleted or if there was an error, the error message is shown and nothing further happens. The user must go back to try again. If the new quantity is anything between 1-99999, then the basket is updated with the new quantity with the user’s ID, the item ID number and the new quantity. Again, if successful the user is alerted and redirected back to the customer back, if not then an error message comes up and nothing further happens. The user will have to go back to the customer page to try again.
		
	7.	show_order_contents.php	
		The show contents page receives POST information from the customer page. There is again a customer and POST check as before. If both validation checks pass, then the file goes on with the order ID number as from the POST and gets all order information from the orders table and the inventory table for everything under that order and item numbers. This information is displayed in a table with columns: item picture, name, number, cost, quantity. At the top of the table is the order number and at the bottom of the table is the total cost for the order.
		
	8.	employee.php			
		Now we have the employee page. Like before, with the customer checks this page checks to see if you are logged in as an employee. If the user is not logged in as an employee the page only displays a message that the user cannot view that page as it is only for employee’s. If the user passes the employee check, then what is displayed depends if the user logged in is a manager or a regular employee. Both types of employees are shown just two tables. The first table, a table of all the products, is different for each type of employee. For normal employees the table shown consists of: item pictures, names, numbers, costs, quantity’s and finally the last column contains a text box and submit button so that employees can change quantities of items. Manager’s product table will show: item picture, name, number, cost, a text box and submit button to change cost, the quantity, a text box and submit button to change quantity, sales for that item that week, sales for that month, sales for that year, if the item is on sale or not, the sale price, and finally a new text box, drop down menu, and submit button to change the sale promotion information. So starting off with the quantity text box and button, this works the same for both managers and regular employees. The file POST’s the information submitted to itself to do the work. The file detects whether a POST is empty or not and if it is empty it notifies the user with an error alert and reloads the page with no work done. The valid range of numbers is 0-99999. The program detects what type of command is POST’ed, and then validates the text box entry from the user. If the input is valid then the program goes on to update the quantity within the inventory table based on the information POST’ed, the new quantity and the item number. If the validation checks do not pass, a notification pops up alerting the user of what went wrong and then the page is reloaded with no work being done. The input is for managers only, changing the item’s regular cost. The file POST’s the information submitted to itself to do the work. The program detects what type of command is POST’ed, and then validates the text box entry from the user. The valid range of numbers is 0-99.99. As the price can contain a ‘.’ the program can only detect this number range. The program has a more difficult check for the price. If the user’s input validates then the program updates the price within the database. If the input doesn’t validate then a notification is shown to the user and the page is reloaded with no work being done. The last thing a manager can do that a regular employee can’t is to set the sale and sale price. This column has a text box for user input on price, same as the regular price, and a drop down menu. This drop down menu must have something selected. The two options are to set the item not on sale or on sale. One of these two options must be selected for every price change submission. If it is not selected an error message is shown to the user. The text box is parsed the same as previous, and with whichever drop down is selected the item in the inventory is updated with whatever information is submitted by the user. Finally, the last table on the employee tab. This table is shown to both types of users and is not different between types. This table shows all pending orders from the customer order table. The table has columns for: customer username, customer ID, order number ID, has it shipped, and finally a column for a button to ship the order. Like the other forms, this button POST’s information to this same file to do the work. The POST information on this is only the information about the order. This POST information has no user input other than the button clicking so it simply checks the POST data is correct from the button and then updates the customer orders table within the database to show the order has now been shipped. And that concludes the employee tab.
		
	9.	register.php			
		The next page is the registration tab. This page is for new users to register with the website and database so that they may order products. There is a single form on this page. Above the form is a check to see if the user is logged in. If the user is currently logged in as a staff or customer the form will not submit. Nothing will happen. Users cannot register with the site when they are already logged in. When not logged in, users can enter user information about themselves. The only things required is a username they desire and a password. There are inputs for name and addresses but there are no checks done on them because they are not recorded in the database or kept. The username and password have checks done on them to verify they are valid. The username and password are also required to be under 20 characters. There are also checks to make sure the entered username is not already in the employee or customer tables, if it already exists then an error message is sent back. If any error is detected the error message is displayed next to the username and/or password box and no work is done on the database. Once the checks are passed then the user is added to the customer table with the desired username and password and a randomly generated unique user ID number that is generated on the fly from the program itself. If something went wrong, then the program stops and lets the user know something went wrong and to try again.
		
	10.	login.php				
		Next is the login page. If the user is already logged in, an alert is shown to the user and redirected back to the main index page. This is page has a simple form that accepts a username and password. The page POST’s this information to itself and does the checks. The username and password have checks done on them to verify they are valid. The username and password are also required to be under 20 characters. If any error is detected the error message is displayed next to the username and/or password box and no work is done. If the username and password match up with what is in the database, then the user is logged in by storing a cookie in the user’s browser. This is how the program knows whether a user is logged in and who the user is. Once logged in the page will redirect you to the main index page.
		
	11.	logout.php				
		The logout page is simple, the only thing done is all cookies with our webpage’s cookie name are deleted. The user is alerted to the fact that they have been logged out, or if they are not logged in the program alerts them that they must be logged in to log out. In either case the user is redirected to the main index page. This page is not meant to be stayed on at any time length, although it does contain the navigation bar.
		
	12.	ECOMMERCE.sql			
		The Ecommerce SQL file is simple, it uses the database coded and then creates the tables needed. Then the tables are filled with values. This data was generated on a semi-random basis and will at times not make sense. See the file for more comments.
		
	13.	drop_tables.sql			
		The drop tables SQL file is very simple, using the database, it drops the tables for our database in the correct order needed to. This file was made to speed testing and creation of the website. We are including it in case it is ever needed. 
		
	14.	README.txt				
		This document.
		
	15.	FinalReport.pdf			
		Final report document with descriptions, figures, and database design.
		
	16.	/Images/*				
		Directory with images for products. 
		



	
